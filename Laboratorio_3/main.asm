;*********
;Universidad del valle de Guatemala
;Josué Fernando Castro ramos
; carnet 22082
;Curso de programación de microcontroladores
;*********
.include "M328PDEF.INC"
.cseg 
.org 0x00
	JMP		MAIN

.org 0x0006
	JMP		ISR_PCINT0

.org 0x0020
	JMP		ISR_TIMER0

TABLA7SEG: .DB	 0x3F, 0x06, 0x5B, 0x4F, 0x66,	0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0X39, 0x5E, 0x79, 0x71

;*********
;Tabla de valores
;*********


MAIN:
;*********
;Stack
;*********
	LDI		R16, LOW(RAMEND)
	OUT		SPL, R16 
	LDI		R17, HIGH(RAMEND)
	OUT		SPL, R17

;*********
;Configuracion
;*********
SETUP:
	LDI		ZL, LOW(TABLA7SEG << 1)
	LDI		ZH, HIGH(TABLA7SEG << 1)
	
	//OSCILADOR
	LDI		R16, (1 << CLKPCE)	;HABILITA EL PRESCALER
	STS		CLKPR, R16 
	LDI		R16, 0				;OSCILADOR DE 16MHz
	STS		CLKPR, R16
	
	//SALIDAS Y ENTRADAS
	LDI		R16, 0b0000_0000	;
	STS		UCSR0B, R16			;DESABILITO TX Y RX
	LDI		R16, 0b1111_1111	;
	OUT		DDRD, R16			;COLOCO EL PUERTO D COMO SALIDA
	LDI		R16, 0b1111_1111	;
	OUT		DDRC, R16			;COLOCO EL PUERTO C COMO SALIDA

	//INTERRUPCIONES
	LDI		R16, 0
	OUT		TCCR0A, R16			;CONTADOR NORMAL
	LDI		R16, 5
	OUT		TCCR0B, R16			;PRESCALER 1024
	LDI		R16, 1				;
	STS		TIMSK0, R16			;HABILITA TOIE0
	LDI		R16, 99				;
	OUT		TCNT0, R16			;VALOR INICIAL

	LDI		R16, 3
	STS		PCMSK0, R16			;HABILITA PCINT0 y PCINT1
	LDI		R16, 1				;
	STS		PCICR, R16			;HABILITA PCIE0


	LDI		R16, 0
	LDI		R17, 0
	LDI		R18, 0
	LDI		R19, 0
	LDI		R20, 0

	LPM		R18, Z
	OUT		PORTD, R18

	SEI

LOOP:
	CPI		R21, 100				; VERIFICASMO SI R20 = 100 PARA QUE HAGA 1S
	BRNE	LOOP					; SI NO SON IGUALES
	LDI		R21,0					; SI SON IGUALES REINICIA R20
	INC		ZL						; INCREMENTA LA POSIOCION DE LA TABLA DE VALORES
	LPM		R18, Z					; CARGA A R20 EL VALOR DE ESA POSICION
	OUT		PORTD, R18				; MUESTRA EN EL PUERTO B EL VALOR
	CPI		R18, 0x0f				; VERIFICA SI ES EL VALOR MAXIMO 
	BRNE	LOOP					; SI NO SON IGUALES
	LDI		ZL, LOW(TABLA7SEG << 1)	; 
	LDI		ZH, HIGH(TABLA7SEG << 1); REINCIA EL LOS VALORES DE LA TABLA
	LPM		R18, Z					; CARGA A R18 EL VALOR DE Z
	OUT		PORTD, R18				; MUESTRA EN EL PUERTO B EL VALOR
	RJMP	LOOP					;

;*********
;Subrutinas
;*********

;*********
;VECTOR INTERRUPCION 1
ISR_TIMER0:
	PUSH	R16					;GUARDAMOS EN LA PILA
	IN		R16, SREG			;
	PUSH	R16					;
		
	INC		R21					;INCREMENTAMOS R20 

	LDI		R17, 99				;
	OUT		TCNT0, R17			;VALOR INICIAL 

	POP		R16					;SACAMOS DE LA PILA
	OUT		SREG, R16			;
	POP		R16					;
	RETI



;*********
;VECTOR INTERRUPCION 2
ISR_PCINT0:
	PUSH	R16					;GUARDAMOS EN LA PILA
	IN		R16, SREG			;
	PUSH	R16					;

BOTON1:
	IN		R19, PINB			;
	SBRC	R19, PB0			;VERIFICASMOS SI PINB0 ES IGUAL A 0
	RJMP	BOTON2				;SI NO ES IGUAL A 0
	INC		R20					;SI ES IGUAL A 0, INCREMENTAMOS
	OUT		PORTC, R20			;
	RJMP	SALIR				
		
BOTON2:
	IN		R19, PINB			;
	SBRC	R19, PB1			;VERIFICASMOS SI PINB1 ES IGUAL A 0
	RJMP	SALIR				;SI NO ES IGUAL A 0
	DEC		R20					;SI ES IGUAL A 0, DECREMENTAMOS
	OUT		PORTC, R20			;

SALIR:
	POP		R16					;SACAMOS DE LA PILA
	OUT		SREG, R16			;
	POP		R16					;
	RETI

NO_RESET:

	; Mostrar las decenas de segundos en el display
	LDS		R18, TABLA7SEG
	ADD		R18, decenas
	LPM		R18, Z
	OUT		PORTD, R18

	; Retardo de 1 segundo (ajustar según el prescaler del temporizador)
	CPI		segundos, 100
	BRNE	NO_DELAY
	LDI		segundos, 0
	; Aquí puedes realizar otras tareas si es necesario
NO_DELAY:

	RJMP	LOOP